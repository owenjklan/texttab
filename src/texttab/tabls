#!/usr/bin/env python3
import os
import stat

import click

from const import AVAILABLE_BORDERS
from table import BasicTable
from formatters import ReadableBytesFormatter, UnixPermissionsFormatter


example_columns = [
    {
        "label": "File Name",
        "width": 32,
        "align": "left",
        "bg":    "white",
        "fg":    "black",
        "head_bg": "white",
        "head_fg": "blue",
    },
    {
        "label": "Owner - User",
        "width": 14,
        "align": "centre",
        "bg":    "white",
        "fg":    "black",
        "head_bg": "white",
        "head_fg": "blue",
    },
    {
        "label": "Size (bytes)",
        "align": "right",
        "width": 15,
        "bg":    "white",
        "fg":    "black",
        "head_bg": "white",
        "head_fg": "blue",
        "formatter": ReadableBytesFormatter,
    },
    {
        "label": "Permissions",
        "align": "centre",
        "bg": "white",
        "fg": "black",
        "head_bg": "white",
        "head_fg": "blue",
        "formatter": UnixPermissionsFormatter,
    },
]


@click.command()
@click.argument("path")
@click.option("--fg", "fg",
              type=str, metavar="FG_COLOUR",
              default=None, show_default=None,
              help=("Set table foreground colour."))
@click.option("--bg", "bg",
              type=str, metavar="BG_COLOUR",
              default=None, show_default=None,
              help=("Set table background colour."))
@click.option("--head-fg", "head_fg",
              type=str, metavar="FG_COLOUR",
              default=None, show_default=None,
              help=("Set table heading foreground colour."))
@click.option("--head-bg", "head_bg",
              type=str, metavar="BG_COLOUR",
              default=None, show_default=None,
              help=("Set table heading background colour."))
def main(path, fg, bg, head_fg, head_bg):
    print(("Simple test program, designed to demonstrate alignment of "
           "columns as well as border styles.\n"))
    print("Border styles are available from 'const.AVAILABLE_BORDERS' list.\n")

    border_style = "single-rounded"

    print(f"Table style: {border_style}")
    if fg is not None:
        print(f"Foreground Colour:  {fg}")
    if bg is not None:
        print(f"Background Colour:  {bg}")

    bt = BasicTable(
        columns=example_columns,
        border=border_style,
        fg=fg, bg=bg,
        head_fg=head_fg, head_bg=head_bg,
    )

    dir_listing = sorted(os.listdir(path))

    for entry in dir_listing:
        name = entry

        stat_struct = os.stat(os.path.join(path, entry))

        owner = f"{stat_struct.st_uid}:{stat_struct.st_gid}"

        size = stat_struct.st_size

        mode = stat_struct.st_mode

        row = (name, owner, size, mode)

        bt.add_row(row)

    print("\n".join(bt.render()))
    print("")


if __name__ == "__main__":
    main()
