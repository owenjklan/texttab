#!/usr/bin/env python3
from time import sleep

import click

from texttab.const import AVAILABLE_BORDERS
from texttab.table import BasicTable


class TestFormatter(object):
    @classmethod
    def format(cls, value, col):
        format_string = "\033[0m"
        reset = False
        rv = int(value)
        if rv >= 10:
            format_string += "\033[5m"  # Blink
            format_string += "\033[1m"  # Bold
            format_string += "\033[32;47m"  # Green
            reset = True
        elif rv < 10 and rv > 1:
            format_string += "\033[34;47m"  # Blue??
            reset = True
        else:
            format_string += "\033[31;47m"  # Red
            reset = True
        return format_string, str(value), reset


example_columns = [
    {
        "label": "Name",
        "width": 25,
        "align": "left",
        "bg":    "white",
        "fg":    "black",
        "head_bg": "white",
        "head_fg": "blue",
    },
    {
        "label": "Email",
        "width": 32,
        "align": "centre",
        "bg":    "white",
        "fg":    "black",
        "head_bg": "white",
        "head_fg": "blue",
    },
    {
        "label": "Years-of-Service",
        "align": "right",
        "bg":    "white",
        "fg":    "black",
        "head_bg": "white",
        "head_fg": "blue",
        "formatter": TestFormatter,
    }
]

example_data = [
    ("Owen Klan", "oklan@example.com", 1),
    ["Barry Badlow", "bbadlow@example.com", 13],
    ["Mallory Maldives", "mmaldy@example.com", 5],
    ("Roger the Shrubber", "r.shrubberies@shrubguild.net", 6),
    ("Artemis Entreri", "art.entreri@baerne.com.mz", 11),
    ("Genevive Goodhigh Really-Long-Named", "ggoodhigh@example.com", 2),
]


@click.command()
@click.option("--fg", "fg",
              type=str, metavar="FG_COLOUR",
              default=None, show_default=None,
              help=("Set table foreground colour."))
@click.option("--bg", "bg",
              type=str, metavar="BG_COLOUR",
              default=None, show_default=None,
              help=("Set table background colour."))
@click.option("--head-fg", "head_fg",
              type=str, metavar="FG_COLOUR",
              default=None, show_default=None,
              help=("Set table heading foreground colour."))
@click.option("--head-bg", "head_bg",
              type=str, metavar="BG_COLOUR",
              default=None, show_default=None,
              help=("Set table heading background colour."))
@click.option("--scroll", "scroll_flag",
              type=bool, is_flag=True,
              default=False, show_default=True,
              help=("If set, rows added to table will be printed instantly,"
                    "but with a short delay (to show the effect)."))
def main(fg, bg, head_fg, head_bg, scroll_flag):
    print(("Simple test program, designed to demonstrate alignment of "
           "columns as well as border styles.\n"))
    print("Border styles are available from 'const.AVAILABLE_BORDERS' list.\n")
    for border_style in AVAILABLE_BORDERS:
        print(f"Table style: {border_style}")
        if fg is not None:
            print(f"Foreground Colour:  {fg}")
        if bg is not None:
            print(f"Background Colour:  {bg}")

        bt = BasicTable(
            columns=example_columns,
            border=border_style,
            fg=fg, bg=bg,
            head_fg=head_fg, head_bg=head_bg,
        )

        if scroll_flag is True:
            print("\n".join(bt.generate_header_lines()))

        for row in example_data:
            bt.add_row(row, instant=scroll_flag)
            if scroll_flag is True:
                sleep(0.5)

        if scroll_flag is False:
            print("\n".join(bt.render()))
        else:
            print(bt.generate_end_line())
        print("")


if __name__ == "__main__":
    main()
